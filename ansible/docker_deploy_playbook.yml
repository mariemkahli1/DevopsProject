---
- name: Deploy Application using Docker
  hosts: servers
  gather_facts: True
  become: yes

  vars_files:
    - ansible-vars.yaml  # Include your variables file

  tasks:
    # Ensure SSH connection is available
    - name: Ensure SSH connection is available
      ansible.builtin.wait_for:
        port: 22
        delay: 10
        timeout: 100
        search_regex: OpenSSH
        host: '{{ ansible_host | default(inventory_hostname) }}'

    # Install Docker and Docker Compose
    - name: Install Docker and Docker Compose
      apt:
        name: "{{ docker_package_name }}"
        state: present
        update_cache: yes
        cache_valid_time: "{{ cache_time }}"

    # Install Docker Compose
    - name: Install Docker Compose
      apt:
        name: docker-compose
        state: present

    # Ensure Docker service is started
    - name: Ensure Docker service is started
      systemd:
        name: "{{ docker_service_name }}"
        state: started
        enabled: yes

    # Check Docker version
    - name: Check Docker version
      command: docker --version
      register: docker_version_output

    # Display Docker version
    - name: Display Docker version
      debug:
        msg: "Docker version: {{ docker_version_output.stdout }}"

    # Check Docker Compose version
    - name: Check Docker Compose version
      command: docker-compose --version
      register: docker_compose_version_output

    # Display Docker Compose version
    - name: Display Docker Compose version
      debug:
        msg: "Docker Compose version: {{ docker_compose_version_output.stdout }}"

    # Add ubuntu user to docker group
    - name: Add ubuntu user to docker group
      user:
        name: ubuntu
        groups: docker
        append: yes

    # Reconnect to server session
    - name: Reconnect to server session
      meta: reset_connection

    # Install AWS CLI on EC2 Instances
    - name: Ensure curl is installed
      package:
        name: curl
        state: present

    - name: Ensure unzip is installed
      package:
        name: unzip
        state: present

    - name: Check if AWS CLI is installed
      command: "aws --version"
      register: aws_cli_check
      ignore_errors: true

    - name: Download AWS CLI installation script using curl
      command: curl -o /tmp/awscliv2.zip https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip
      when: aws_cli_check.failed

    - name: Unzip AWS CLI installation package
      unarchive:
        src: "/tmp/awscliv2.zip"
        dest: "/tmp/"
        remote_src: yes
      when: aws_cli_check.failed

    - name: Run AWS CLI installer
      command: "/tmp/aws/install -i /usr/local/aws-cli -b /usr/local/bin --update"
      when: aws_cli_check.failed

    - name: Verify AWS CLI installation
      command: "aws --version"
      register: aws_cli_version

    - debug:
        msg: "AWS CLI version: {{ aws_cli_version.stdout }}"

    # Log in to Amazon ECR
    - name: Log in to Amazon ECR
      docker_login:
        registry_url: "{{ ecr_url }}"
        username: AWS
        password: "{{ lookup('pipe', 'aws ecr get-login-password --region ' + region) }}"
        reauthorize: yes

    # Pull frontend Docker image from ECR to EC2 instance
    - name: Pull Docker image for the frontend from ECR to EC2 instance
      docker_image:
        name: "{{ ecr_url }}/{{ ecr_repository }}:{{ frontend_image_tag }}"
        source: pull

    # Pull backend Docker image from ECR to EC2 instance
    - name: Pull Docker image for the backend from ECR to EC2 instance
      docker_image:
        name: "{{ ecr_url }}/{{ ecr_repository }}:{{ backend_image_tag }}"
        source: pull

    # Copy docker-compose.yaml to EC2 instance
    - name: Copy docker-compose.yaml to EC2 instance
      copy:
        src: "/var/lib/jenkins/workspace/clone pipeline test/enis-app-tp/docker-compose.yml"
        dest: "/home/ubuntu/docker-compose.yml"

    # Create Docker network 'my_bridge'
    - name: Create Docker network 'my_bridge'
      command: docker network create my_bridge
      ignore_errors: true  # This ensures that the playbook doesn't fail if the network already exists

    # Start Docker containers using Docker Compose
    - name: Start Docker containers using Docker Compose
      docker_compose:
        project_src: "/home/ubuntu"
        state: present  # "present" means up, "absent" would stop and remove the containers

    # Example: Run migrations inside backend container (if required)
    - name: Run makemigrations inside backend container
      command: docker exec {{ backend_container_name }} python manage.py makemigrations

    - name: Run migrations inside backend container
      command: docker exec {{ backend_container_name }} python manage.py migrate
