def EC2_PUBLIC_IP = ""
def RDS_ENDPOINT = ""
def DEPLOYER_KEY_URI = ""

pipeline {
    agent any
    environment {
        AWS_ACCESS_KEY_ID = credentials('Jenkins_AWS_Access_key_ID')
        AWS_SECRET_ACCESS_KEY = credentials('Jenkins_AWS_Secret_access_key')
        AWS_REGION = "us-east-1"
    }
    stages {
        stage('Provision Server and Database') {
            steps {
                script {
                    dir('my-terraform-project/remote-backend') {
                        sh "terraform init"
                        sh "terraform apply --auto-approve"
                    }
                    dir('my-terraform-project') {
                        sh "terraform init"
                        sh "terraform apply --auto-approve"

                        EC2_PUBLIC_IP = sh(script: 'terraform output -raw instance_public_ip', returnStdout: true).trim()
                        RDS_ENDPOINT = sh(script: 'terraform output -raw rds_endpoint', returnStdout: true).trim()
                        DEPLOYER_KEY_URI = sh(script: 'terraform output -raw deployer_key_s3_uri', returnStdout: true).trim()
                    }
                }
            }
        }

        stage('Update Frontend Configuration') {
            steps {
                script {
                    dir('enis-app-tp/frontend/src') {
                        writeFile file: 'config.js', text: "export const API_BASE_URL = 'http://${EC2_PUBLIC_IP}:8000';"
                    }
                }
            }
        }

        stage('Update Backend Configuration') {
            steps {
                script {
                    dir('enis-app-tp/backend/backend') {
                        sh "sed -i 's/\\('HOST': \\).*/\\1'${RDS_ENDPOINT}',/' settings.py"
                    }
                }
            }
        }

        stage('Create Database in RDS') {
            steps {
                script {
                    sh """
                    mysql -h ${RDS_ENDPOINT} -u dbuser -prahma123 -e "CREATE DATABASE IF NOT EXISTS enis_tp;"
                    """
                }
            }
        }

        stage('Build Frontend Docker Image') {
            steps {
                dir('enis-app-tp/frontend') {
                    script {
                        docker.build("enis-app-frontend", ".")
                    }
                }
            }
        }

        stage('Deploy Application') {
            steps {
                script {
                    echo "Deploying application to ${EC2_PUBLIC_IP}"
                    // Add deployment logic here
                }
            }
        }
    }
}
